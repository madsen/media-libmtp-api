MLA_Album					T_PTROBJ_LIBMTP
MLA_AllowedValues				T_PTROBJ_LIBMTP
MLA_Error					T_PTROBJ_LIBMTP
MLA_File					T_PTROBJ_LIBMTP
MLA_FileSampleData				T_PTROBJ_LIBMTP
MLA_Folder					T_PTROBJ_LIBMTP
MLA_MTPDevice					T_PTROBJ_LIBMTP
MLA_Playlist					T_PTROBJ_LIBMTP
MLA_RawDevice					T_PTROBJ_LIBMTP
MLA_Track					T_PTROBJ_LIBMTP

LIBMTP_error_number_t				T_IV
LIBMTP_filetype_t				T_IV
LIBMTP_property_t				T_IV
char const *					T_PV
const char *					T_PV
uint16_t					T_UV
uint32_t					T_UV
uint64_t					T_NV
uint8_t						T_U_CHAR

#############################################################################
INPUT
T_PTROBJ_LIBMTP
	if (SvROK($arg) && sv_derived_from($arg, \"${(my $ntt=$ntype)=~s/^MLA_/Media::LibMTP::API::/g;\$ntt}\")) {
	    IV tmp = SvIV((SV*)SvRV($arg));
	    $var = INT2PTR($type,tmp);
	}
	else
	    Perl_croak(aTHX_ \"%s: %s is not of type %s\",
			${$ALIAS?\q[GvNAME(CvGV(cv))]:\qq[\"$pname\"]},
			\"$var\", \"${(my $ntt=$ntype)=~s/^MLA_/Media::LibMTP::API::/g;\$ntt}\")

#############################################################################
OUTPUT
T_PTROBJ_LIBMTP
	sv_setref_pv($arg, \"${(my $ntt=$ntype)=~s/^MLA_/Media::LibMTP::API::/g;\$ntt}\", (void*)$var);
